options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # ==================================================================
  # == Frontend Service (Vue.js)
  # ==================================================================
  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-build'
    args:
      - 'build'
      - '-t'
      - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
      - '.' # Use the Dockerfile in the root directory

  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-push'
    args:
      - 'push'
      - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
    waitFor: ['frontend-build']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'frontend-deploy'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_FRONTEND_SERVICE_NAME}'
      - '--image=europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region=europe-west3'
      - '--platform=managed'
      - '--ingress=internal-and-cloud-load-balancing'
      - '--project=${PROJECT_ID}'
      - '--allow-unauthenticated'
    waitFor: ['frontend-push']

  # ==================================================================
  # == Backend Service (Go)
  # ==================================================================
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-build'
    args:
      - 'build'
      - '-t'
      - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
      - './backend' # Specify the backend directory

  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-push'
    args:
      - 'push'
      - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
    waitFor: ['backend-build']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'backend-deploy'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_BACKEND_SERVICE_NAME}'
      - '--image=europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region=europe-west3'
      - '--platform=managed'
      - '--ingress=internal-and-cloud-load-balancing'
      - '--project=${PROJECT_ID}'
      - '--allow-unauthenticated'
      # Set the runtime service account for the new revision. This is critical.
      - '--service-account=${_BACKEND_SA_NAME}'
      # Atomically set all environment variables and secrets for the new revision.
      # The runtime service account needs the "Secret Manager Secret Accessor" role.
      - '--set-secrets=SMTP_PASS=${_SMTP_SECRET_NAME}:latest'
      - '--set-secrets=/etc/gcp/gcp-credentials.json=${_GCP_CREDS_SECRET_NAME}:latest'
      - >-
        --set-env-vars=GCP_CREDENTIALS_PATH=/etc/gcp/gcp-credentials.json,CALENDAR_ID=${_CALENDAR_ID},GCAL_AVAILABLE_SLOT_SUMMARY=${_GCAL_AVAILABLE_SLOT_SUMMARY},SMTP_HOST=${_SMTP_HOST},SMTP_PORT=${_SMTP_PORT},SEND_FROM=${_SEND_FROM},SEND_FROM_ALIAS=${_SEND_FROM_ALIAS},GCP_PROJECT_ID=${_GCP_PROJECT_ID},GCP_LOCATION=${_GCP_LOCATION}
    waitFor: ['backend-push']

# Substitution variables to be configured in the Cloud Build trigger.
substitutions:
  _FRONTEND_SERVICE_NAME: 'ivmanto-com'
  _BACKEND_SERVICE_NAME: 'ivmanto-backend-service'
  _BACKEND_SA_NAME: 'ivmanto-backend-sa'
  _REPO_NAME: 'ivmanto-com-repo'
  _SMTP_SECRET_NAME: 'smtp-password'
  _GCP_CREDS_SECRET_NAME: 'gcp-credentials-json'
  # These must be configured in the Cloud Build Trigger UI.
  _CALENDAR_ID: 'c_2950137553d97197f3e7963a9543784e119032ca9cc1b970ea668c6e9d2c9764@group.calendar.google.com'
  _GCAL_AVAILABLE_SLOT_SUMMARY: 'AfB'
  _SMTP_HOST: 'smtp.example.com'
  _SMTP_PORT: '587'
  _SEND_FROM: 'nikolay.tonev@ivmanto.com'
  _SEND_FROM_ALIAS: 'accounts@ivmanto.com'
  _GCP_PROJECT_ID: 'ivmanto-com-prod'
  _GCP_LOCATION: 'europe-west3'

# The image created by this build.
images:
  - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
  - 'europe-west3-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
