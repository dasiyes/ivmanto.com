options:
  # This option tells Cloud Build to send logs directly to Cloud Logging
  # and not to a Cloud Storage bucket. This is the recommended approach when
  # using a custom service account to avoid permission issues with the default
  # logs bucket.
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Install dependencies using the official npm cloud builder.
  # This step runs `npm install` to download all the project dependencies.
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    id: 'npm-install'

  # Step 2: Build the production version of the Vue.js application.
  # This step runs the `npm run build` script defined in your package.json.
  # It generates the static HTML, CSS, and JavaScript files in the /dist directory.
  - name: 'gcr.io/cloud-builders/npm'
    args: ['npx', 'vite', 'build']
    id: 'npm-build'
    waitFor: ['npm-install'] # Ensure this step runs after dependencies are installed.

  # Step 3: Deploy the static files to Google Cloud Storage.
  # This step uses gsutil to synchronize the contents of the /dist directory
  # with your Cloud Storage bucket. The -d flag deletes objects in the bucket
  # that are not present in the source, ensuring a clean deployment.
  # The -r flag makes the copy recursive.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gsutil'
    args:
      - '-m'
      - 'rsync'
      - '-d'
      - '-r'
      - 'dist'
      - 'gs://${_BUCKET_NAME}' # This is a substitution variable you'll set in the trigger.
    id: 'deploy-to-gcs'
    waitFor: ['npm-build'] # Ensure this step runs after the build is complete.
